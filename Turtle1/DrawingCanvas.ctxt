#BlueJ class context
comment0.target=DrawingCanvas
comment0.text=\r\n\ Generic\ Canvas\ descendant\ object\ for\ drawing\ lines.\ This\ object\ does\ not\r\n\ have\ any\ intelligence\ or\ memory.\ This\ object\ can\ have\ zero\ or\ more\ drawers\ \r\n\ who\ will\ be\ notified\ when\ the\ component\ refReshing\ is\ needed.\ This\ object\ \r\n\ will\ pass\ the\ Graphics\ object\ to\ the\ associated\ DrawingController\ objects.\ \r\n\ The\ notified\ controllers\ can\ then\ draw\ whatever\ they\ want\ on\ the\ passed\ \r\n\ Graphics\ object.\r\n\r\nDate\ Modified\:\ Feb\ 24,\ 2009\r\n\ \r\n\ Changed\ the\ array\ of\ DrawingController\ to\ List\ of\ DrawingController\ and\ \r\n\ removed\ the\ restriction\ of\ maximum\ number\ of\ DrawingController\ objects\r\n\ associated\ to\ this\ DrawingCanvas.\r\n\r\n\ @author\ Dr\ Caffeine\r\n\ \r\n
comment1.params=
comment1.target=DrawingCanvas()
comment1.text=\r\n\ A\ default\ constructor\ that\ creates\ an\ instance\ of\ the\ PlottingCanvas\r\n\ class.\ Grid\ lines\ are\ drawn,\ the\ center\ position\ of\ the\ canvas\ is\ \r\n\ set\ to\ (0,0)\ of\ the\ logical\ (user)\ coordinate,\ and\ the\ scaling\ \r\n\ unit\ is\ set\ to\ the\ default\ size\ defined\ by\ the\ constant\ DEFAULT_UNIT.\r\n
comment10.params=x\ y
comment10.target=void\ setOrigin(int,\ int)
comment10.text=\r\n\ A\ mutator\ method\ that\ sets\ the\ origin\ point.\ The\ parameter\ (x,y)\r\n\ specifies\ the\ point\ in\ the\ logical\ coordinate\ system\ that\ corresponds\r\n\ to\ the\ physical\ center\ position\ of\ the\ canvas.\ By\ default,\ the\ center\r\n\ of\ the\ canvas\ represents\ the\ point\ (0,0)\ of\ the\ \r\n\ logical\ coordinate\ system.\r\n\ For\ example,\ if\ you\ pass\ 100\ and\ 200\ for\ the\ x\ and\ y\ parameters,\ the\ \r\n\ logical\ coordinate\ center\ point\ is\ shifted\ 100\ units\ to\ the\ left\ and\ \r\n\ 200\ units\ down.\r\n\r\n\ @param\ x\ \ \ The\ x-coordinate\ of\ a\ logical\ point\ that\ corresponds\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ to\ the\ center\ of\ the\ canvas.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @param\ y\ \ \ The\ y-coordinate\ of\ a\ logical\ point\ that\ corresponds\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ to\ the\ center\ of\ the\ canvas.\r\n\r\n
comment11.params=pixelsPerUnit
comment11.target=void\ setUnit(double)
comment11.text=\r\n\ A\ mutator\ method\ that\ sets\ the\ scaling\ factor.\ The\ default\ scaling\ is\ 2\ pixels\ \r\n\ per\ single\ logical\ unit.\ Increase\ the\ number\ for\ a\ more\ zoomed\ view\ and\ decrease\ \r\n\ the\ number\ for\ a\ more\ zoomed\ out\ view.\r\n\ \r\n\ @param\ pixelsPerUnit\ The\ scaling\ unit.\r\n
comment12.params=g
comment12.target=void\ update(java.awt.Graphics)
comment12.text=\r\n\ Overrides\ the\ inherited\ update\ so\ no\ refreshing\ is\ done.\ \r\n\ Since\ double-buffering\ is\ used,\ new\ image\ is\ drawn\ over\ the\ old\ one\r\n\ without\ erasing\ the\ old\ one.\ This\ technique\ avoids\ flickering.\r\n\r\n\ NOTE\:\ do\ not\ call\ this\ method\ directly.\r\n\r\n\ @param\ g\ A\ Graphics\ object\ where\ the\ drawing\ takes\ place.\r\n\ \ \ \ \ \r\n
comment13.params=g
comment13.target=void\ drawAxis(java.awt.Graphics)
comment13.text=\r\n\ Draws\ the\ X\ and\ Y\ axis\ in\ black\ if\ the\ grid\ lines\ are\ shown\ and\ in\ \r\n\ gray\ if\ the\ no\ grid\ lines\ are\ shown.\r\n\ \r\n\ @param\ g\ The\ Graphics\ object\ where\ the\ X\ and\ Y\ axis\ are\ drawn.\r\n
comment14.params=g
comment14.target=void\ drawContents(java.awt.Graphics)
comment14.text=\r\n\ Asks\ the\ owner\ DrawingController\ objects\ to\ draw\ their\ contents\r\n\ \r\n\ @param\ g\ The\ Graphics\ object\ where\ the\ contents\ are\ drawn.\r\n
comment15.params=g
comment15.target=void\ drawGrids(java.awt.Graphics)
comment15.text=\r\n\ Draws\ the\ grid\ lines\ in\ cyan.\ The\ spacing\ between\ the\ grid\ lines\ \r\n\ is\ set\ to\ \ (default\ spacing\ *\ scale\ factor)\ logical\ units.\r\n\ \r\n\ @param\ g\ The\ Graphics\ object\ where\ the\ grid\ lines\ are\ drawn.\r\n
comment2.params=newdrawer
comment2.target=void\ addOwner(DrawingController)
comment2.text=\r\n\ A\ mutator\ method\ that\ adds\ another\ DrawingController\ that\ will\r\n\ draw\ its\ trajectory\ on\ this\ canvas.\r\n\r\n\ @param\ newdrawer\ \ A\ DrawingController\ that\ will\ draw\ its\ trajectory\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ on\ this\ canvas.\r\n
comment3.params=
comment3.target=void\ clear()
comment3.text=\r\n\ Erases\ the\ current\ contents\ of\ the\ PlottingCanvas\ by\ painting\ \r\n\ the\ whole\ canvas\ with\ the\ background\ color.\r\n
comment4.params=g\ polygon\ color
comment4.target=void\ drawPolygon(java.awt.Graphics,\ java.awt.Polygon,\ java.awt.Color)
comment4.text=\r\n\ Draws\ the\ polygon\ in\ the\ specified\ color\ on\ Graphics\ g\r\n\ \r\n\ @param\ g\r\n\ @param\ polygon\r\n\ @param\ color\r\n
comment5.params=g\ color\ pensize\ position\ text
comment5.target=void\ drawText(java.awt.Graphics,\ java.awt.Color,\ int,\ Position,\ java.lang.String)
comment5.text=\r\n\ Draws\ the\ text\ on\ the\ Graphics\ g\ in\ the\ specified\ color\ with\ pensize\ \r\n\ thickness\ at\ position\ location.\r\n\ \r\n\ @param\ g\ \ \ \ \ \ \ \ \ the\ Graphics\ to\ draw\ text\ on\r\n\ @param\ color\ \ \ \ \ the\ color\ of\ the\ pen\r\n\ @param\ pensize\ \ \ the\ thickness\ of\ the\ pen\r\n\ @param\ position\ \ the\ position\ to\ draw\ the\ text\r\n\ @param\ text\ \ \ \ \ \ the\ content\ to\ display\r\n
comment6.params=
comment6.target=void\ init()
comment6.text=\r\n\ Initializes\ the\ necessary\ objects\ for\ double-buffering\ drawing.\ Gets\r\n\ the\ size\ information\ of\ the\ canvas,\ which\ is\ necessary\ later\ \r\n\ in\ translating\ logical\ coordinates\ into\ the\ window's\ pixel\ \r\n\ coordinates\ for\ drawing.\r\n\ For\ the\ drawing\ to\ occur\ correctly,\ this\ method\ MUST\ be\ called\ after\ \r\n\ the\ container\ object\ (e.g.\ Frame)\ that\ contains\ this\ canvas\ is\ \r\n\ shown\ and\ before\ a\ drawing\ method\ of\ this\ canvas\ is\ called.\ \r\n\r\n
comment7.params=g
comment7.target=void\ paint(java.awt.Graphics)
comment7.text=\r\n\ Painting\ of\ the\ canvas\ is\ done\ by\ drawing\ the\ whole\ contents\ using\r\n\ the\ double-buffering\ technique.\r\n\r\n\ @param\ g\ \ A\ Graphics\ object\ the\ painting\ takes\ place.\r\n\r\n
comment8.params=graphic\ color\ size\ pt1\ pt2
comment8.target=void\ plot(java.awt.Graphics,\ java.awt.Color,\ double,\ Position,\ Position)
comment8.text=\r\n\ Draws\ a\ line\ between\ two\ points\ pt1\ and\ pt2\ on\ the\ parameter\ graphic\r\n\ in\ the\ specified\ color\ and\ pen\ size.\r\n\r\n\ @param\ graphic\ A\ Graphics\ object\ where\ the\ line\ is\ drawn.\r\n\ @param\ color\ \ \ A\ color\ used\ to\ draw\ the\ line.\r\n\ @param\ size\ \ \ \ The\ pen\ size.\r\n\ @param\ pt1\ \ \ \ \ The\ starting\ point\ of\ the\ line.\r\n\ @param\ pt2\ \ \ \ \ The\ ending\ point\ of\ the\ line.\r\n\r\n
comment9.params=showGrid
comment9.target=void\ setGrid(boolean)
comment9.text=\r\n\ A\ mutator\ method\ that\ sets\ the\ flag\ for\ drawing\ the\ grid\ lines.\ \r\n\ Passing\ true\ will\ make\ the\ grid\ lines\ to\ appear.\r\n\r\n\ @param\ showGrid\ Pass\ 'true'\ to\ show\ the\ grid\ lines.\r\n\r\n
numComments=16
